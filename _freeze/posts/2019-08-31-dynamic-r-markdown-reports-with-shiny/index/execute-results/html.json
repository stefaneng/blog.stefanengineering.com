{
  "hash": "9c8f63530e161c1d7a082d90660f1a37",
  "result": {
    "markdown": "---\ntitle: Dynamic R Markdown Reports with Shiny\nauthor: Stefan Eng\ndate: '2019-08-31'\nslug: dynamic-r-markdown-reports-with-shiny\ncategories:\n  - R\n  - development\ntags:\n  - shiny\n  - rmarkdown\n  - data-science\noutput:\n  blogdown::html_page:\n    toc: no\n    fig_width: 5\n    fig_height: 5\ncsl: ../../static/bibtex/acm-sig-proceedings.csl\n---\n\n::: {.cell}\n\n:::\n\n\nTL;DR here is an example application. See the explaination below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\nui <- fluidPage(\n  downloadButton('download')\n)\n\nserver <- function(input, output) {\n  output$download <- downloadHandler(\n    filename = \"listing.pdf\",\n    content = function(f) {\n      # Create a new empty environment\n      # This allows us to pass in only the relevant variables into the report\n      e <- new.env()\n      # Pass two data sets into our template\n      e$datasets <- list(mtcars, iris)\n      # Render the document\n      rmarkdown::render('template.Rmd',\n                        output_format = rmarkdown::pdf_document(),\n                        output_file=f,\n                        envir = e)\n    }\n  )\n}\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nA common issue I have run into is dynamically generating reports.\nIn particular, during my summer at Novartis there was lots of demands for report listings that could be generated on the fly from a Shiny application.\nUsing the great [rmarkdown](https://github.com/rstudio/rmarkdown) package makes it really easy to do this.\nMy approach is to create a template R markdown file and dynamically generate it using [`rmarkdown::render`](https://www.rdocumentation.org/packages/rmarkdown/versions/1.15/topics/render) in a download handler.\n\nThe full application is available here: https://github.com/stefaneng/Shiny-Dynamic-Report-Generation\n\nWe first need a R markdown template that we can use for the report generation.\nWe want to print out some data set using the `pander` package to make nicer formatted tables.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n````\n---\ntitle: \"Example Template\"\nauthor: \"Stefan Eng\"\ndate: \"8/7/2019\"\noutput: pdf_document\n---\n\n```{r setup, include=FALSE}\nlibrary(knitr)\nlibrary(pander)\nknitr::opts_chunk$set(echo = FALSE)\n```\n\n```{r, results='asis'}\npanderOptions('knitr.auto.asis', FALSE)\nfor(d in datasets) {\n  pander::pander(d, split.table=120)\n}\n```\n````\n:::\n:::\n\n\nTo generate the report from Shiny, we use a [downloadHandler](https://shiny.rstudio.com/reference/shiny/0.14/downloadHandler.html) and render the template using [`rmarkdown::render`](https://www.rdocumentation.org/packages/rmarkdown/versions/1.15/topics/render).\nThis is called each time the user clicks the download button. In the [full example on github](https://github.com/stefaneng/Shiny-Dynamic-Report-Generation), the user can select a data set to include in the report which is more realistic.\nThe example given is the simplest to get you going on generating your own dynamic reports.\n\n## Reproducibility\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       macOS Catalina 10.15.7\n system   x86_64, darwin17.0\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Los_Angeles\n date     2022-12-11\n pandoc   2.19.2 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────\n ! package     * version date (UTC) lib source\n P cli           3.4.1   2022-09-23 [?] CRAN (R 4.2.0)\n P digest        0.6.31  2022-12-11 [?] CRAN (R 4.2.1)\n P evaluate      0.18    2022-11-07 [?] CRAN (R 4.2.0)\n P fastmap       1.1.0   2021-01-25 [?] CRAN (R 4.2.0)\n P glue          1.6.2   2022-02-24 [?] CRAN (R 4.2.0)\n P here        * 1.0.1   2020-12-13 [?] CRAN (R 4.2.0)\n P htmltools     0.5.4   2022-12-07 [?] CRAN (R 4.2.0)\n P htmlwidgets   1.5.4   2021-09-08 [?] CRAN (R 4.2.0)\n P jsonlite      1.8.4   2022-12-06 [?] CRAN (R 4.2.1)\n P knitr         1.41    2022-11-18 [?] CRAN (R 4.2.1)\n P lifecycle     1.0.3   2022-10-07 [?] CRAN (R 4.2.0)\n P magrittr      2.0.3   2022-03-30 [?] CRAN (R 4.2.0)\n   renv          0.16.0  2022-09-29 [1] CRAN (R 4.2.0)\n P rlang         1.0.6   2022-09-24 [?] CRAN (R 4.2.0)\n P rmarkdown     2.18    2022-11-09 [?] CRAN (R 4.2.0)\n P rprojroot     2.0.3   2022-04-02 [?] CRAN (R 4.2.0)\n P rstudioapi    0.14    2022-08-22 [?] CRAN (R 4.2.0)\n P sessioninfo * 1.2.2   2021-12-06 [?] CRAN (R 4.2.0)\n P stringi       1.7.8   2022-07-11 [?] CRAN (R 4.2.0)\n P stringr       1.5.0   2022-12-02 [?] CRAN (R 4.2.0)\n P vctrs         0.5.1   2022-11-16 [?] CRAN (R 4.2.0)\n P xfun          0.35    2022-11-16 [?] CRAN (R 4.2.0)\n P yaml          2.3.6   2022-10-18 [?] CRAN (R 4.2.0)\n\n [1] /Users/stefaneng/personal_devel/stefanengineering.comV3/renv/library/R-4.2/x86_64-apple-darwin17.0\n [2] /Users/stefaneng/personal_devel/stefanengineering.comV3/renv/sandbox/R-4.2/x86_64-apple-darwin17.0/84ba8b13\n\n P ── Loaded and on-disk path mismatch.\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}